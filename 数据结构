1.1.1  什么是数据结构

clock()  捕捉程序从开始到运行至clock()被调用时所耗费的时间。这个时间单位是click tick，即“时钟打点”。
常数CLK_TCK（或CLOCKS_PER_SEC）: 机器时钟每秒所走的时钟打点数
要带上#include<time.h>

#include<stdio.h>
#include<time.h>

clock_t start,stop;   //clock_t是clock()函数返回的变量类型

double duration;     //记录被测的运行时间，以秒为单位

int main()
{    //不在测试范围内的准备工作写在clock()函数之前
   start=clock();      //开始计时
   fun();              //被测函数加在这里
   stop=clock();       //停止计时
   duration=((double)(stop-start))/CLT_TCK;        //计算运行时间
   
     //其他不在测试范围内的处理写在后面，如输出duration
   return 0;
}



1.3 最大子列和问题的最优解

int max(int a[],int n)
{
  int i,thissum=0,maxsum=0;
  for(i=0;i<n;i++){           //向右累加
	 thissum+=a[i];
	  if(thissum>maxsum){maxsum=thissum;}          //发现最大和则更新
	  if(thissum<0){thissum=0;}                 //如果当前子列和为负，则不可能使后面的部分和增大，故弃之
  }
  return maxsum;
}



一元多项式的乘法与加法运算

#include<stdio.h>
#include<stdlib.h>
  
typedef struct PolyNode* polynomial;
struct PolyNode{
    int coef;
    int expon;
    polynomial next;
};
  
void attach(int c,int e,polynomial* prear)
{
    polynomial p;
    p=(polynomial)malloc(sizeof(struct PolyNode));
    p->coef=c;
p->expon=e;
p->next=NULL;
    (*prear)->next=p;
    *prear=p;
}
  
polynomial readpoly()
{
    polynomial p,rear,t;
    int c,e,n;
  
    scanf("%d",&n);
    p=(polynomial)malloc(sizeof(struct PolyNode));
    p->next=NULL;
    rear=p;
  
    while(n--){
        scanf("%d %d",&c,&e);
        attach(c,e,&rear);
    }
    t=p;p=p->next;free(t);
    return p;
}
  
polynomial multipoly(polynomial p1,polynomial p2)
{
    polynomial p,rear,t1,t2,t;
    int c,e;
    if(!p1||!p2) return NULL;
    t1=p1;t2=p2;
  
    p=(polynomial)malloc(sizeof(struct PolyNode));
    p->next=NULL;
    rear=p;
  
    while(t2){
        attach(t1->coef*t2->coef,t1->expon+t2->expon,&rear);
        t2=t2->next;
    }
    t1=t1->next;
  
    while(t1){
        t2=p2;rear=p;
        while(t2){
            c=t1->coef*t2->coef;
            e=t1->expon+t2->expon;
            while(rear->next&&rear->next->expon>e) rear=rear->next;
            if(rear->next&&rear->next->expon==e){
                if(rear->next->coef+c){
                rear->next->coef+=c;
                }
                else{
                    t=rear->next;
                    rear->next=t->next;
                    free(t);
                }
            }
            else{
                t=(polynomial)malloc(sizeof(struct PolyNode));
                t->coef=c;
                t->expon=e;
                t->next=rear->next;
                rear->next=t;
                rear=rear->next;
            }
            t2=t2->next;
        }
        t1=t1->next;
    }
    t=p;p=p->next;free(t);
    return p;
  
}
  
int compare(int a,int b)
{
   if(a>b) return 1;
   if(a<b) return -1;
   if(a==b)  return 0;
}
  
polynomial addpoly(polynomial P1,polynomial P2) {
	polynomial P, Rear, t1, t2, t;
	int c, e;
	if (!P1 && !P2) return NULL; 
	t1 = P1; 
	t2 = P2;
	P = (polynomial)malloc(sizeof(struct PolyNode)); P->next = NULL;
	Rear = P;
	while (t1 !=NULL && t2 != NULL) {
 
		if (t1->expon < t2->expon)
		{
			Rear->next = t2;
			t2 = t2->next;
			Rear = Rear->next;
		}
		else if (t2->expon < t1->expon) {
			Rear->next = t1;
			t1 = t1->next;
			Rear = Rear->next;
		}
		else 
		{
			t2->coef += t1->coef;
			if (t2->coef != 0) 
			{
				Rear->next = t2;
				t2 = t2->next;
				Rear = Rear->next;
			}
			else {
				t = t2;
				t2 = t2->next;
				free(t);
			}
			t = t1;
			t1 = t1->next;
			free(t); 
		}
 
	}
		
	if (t1 == NULL) {
		Rear->next = t2;
	}
	else if(t2 == NULL){
		Rear->next = t1;
	}
 
	t2 = P; P = P->next; free(t2);
	return P;
 
}void printpoly(polynomial p)
{
    int flag=0;
    if(!p){
        printf("0 0\n");
        return; 
    }
  
    while(p){
        if(!flag) flag=1;
        else printf(" ");
        printf("%d %d",p->coef,p->expon);
        p=p->next;
    }
    printf("\n");
}
     
int main()
    {
      polynomial p1,p2,pp,ps; 
        p1=readpoly();
        p2=readpoly();
        pp=multipoly(p1,p2);
        printpoly(pp);
        ps=addpoly(p1,p2);
        printpoly(ps);
        return 0;
    }
